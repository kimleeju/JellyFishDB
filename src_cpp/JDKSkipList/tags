!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AllocateNode	JNISkipList.cc	/^Node* JNISkipList::AllocateNode(string key, string value, int height){$/;"	f	class:JNISkipList
AllocateSplice	JNISkipList.cc	/^JNISkipList::Splice* JNISkipList::AllocateSplice(){$/;"	f	class:JNISkipList
BLOCKED_SKIPLIST_H	JNISkipList.h	2;"	d
CC	Makefile	/^CC=g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS=-std=c++11 -g -Wall \\$/;"	m
FindGreaterorEqual	JNISkipList.cc	/^Node* JNISkipList::FindGreaterorEqual(string key){$/;"	f	class:JNISkipList
FindLast	JNISkipList.cc	/^Node* JNISkipList::FindLast(){$/;"	f	class:JNISkipList
FindLessThan	JNISkipList.cc	/^Node* JNISkipList::FindLessThan(string key, Node** prev){$/;"	f	class:JNISkipList
FindSpliceForLevel	JNISkipList.cc	/^void JNISkipList::FindSpliceForLevel(string key, int level, Node** sp_prev, Node** sp_next, Node* before){$/;"	f	class:JNISkipList
Get	JNISkipList.cc	/^string JNISkipList::Get(string key , Iterator iterator){$/;"	f	class:JNISkipList
Get	MyConcurrentSkipListMap.java	/^	public static String Get(String key) {$/;"	m	class:MyConcurrentSkipListMap
Insert	JNISkipList.cc	/^bool JNISkipList::Insert(string key, string value, Iterator iterator)$/;"	f	class:JNISkipList
JNISkipList	JNISkipList.cc	/^JNISkipList::JNISkipList()$/;"	f	class:JNISkipList
JNISkipList	JNISkipList.h	/^class JNISkipList : public SkipList{$/;"	c
KeyIsAfterNode	JNISkipList.cc	/^bool JNISkipList::KeyIsAfterNode(string key, Node* n){$/;"	f	class:JNISkipList
MyConcurrentSkipListMap	MyConcurrentSkipListMap.java	/^public class MyConcurrentSkipListMap$/;"	c
OBJS	Makefile	/^OBJS:= $(SRCS:.cc=.o)$/;"	m
Put	JNISkipList.cc	/^int JNISkipList::Put(string key, string value, Iterator iterator){$/;"	f	class:JNISkipList
Put	MyConcurrentSkipListMap.java	/^	public static void Put(String[] args) {$/;"	m	class:MyConcurrentSkipListMap
RandomHeight	JNISkipList.cc	/^int JNISkipList::RandomHeight(){$/;"	f	class:JNISkipList
RangeQuery	JNISkipList.cc	/^void JNISkipList::RangeQuery(string start_key, int count, Iterator iterator ){$/;"	f	class:JNISkipList
RecomputeSpliceLevels	JNISkipList.cc	/^int JNISkipList::RecomputeSpliceLevels(string key, int level, Splice* splice){$/;"	f	class:JNISkipList
create_sl	MyConcurrentSkipListMap.java	/^	public static void create_sl() {$/;"	m	class:MyConcurrentSkipListMap
env	JNISkipList.h	/^	JNIEnv *env;$/;"	m	class:JNISkipList
jcls	JNISkipList.h	/^	jclass jcls;$/;"	m	class:JNISkipList
main	JNI_ConcurrentSkipList.cc	/^int main(int argc, char** argv)$/;"	f
main	MyConcurrentSkipListMap.java	/^	public static void main(String[] args)$/;"	m	class:MyConcurrentSkipListMap
mid	JNISkipList.h	/^	jmethodID mid;$/;"	m	class:JNISkipList
sl	MyConcurrentSkipListMap.java	/^	public static ConcurrentSkipListMap<String, String> sl;$/;"	f	class:MyConcurrentSkipListMap
vm	JNISkipList.h	/^	JavaVM *vm;$/;"	m	class:JNISkipList
vm_args	JNISkipList.h	/^	JavaVMInitArgs vm_args;$/;"	m	class:JNISkipList
~JNISkipList	JNISkipList.h	/^    ~JNISkipList(){}$/;"	f	class:JNISkipList
