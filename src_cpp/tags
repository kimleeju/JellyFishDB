!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BLOCKED_SKIPLIST_H	BlockedSkipList.h	2;"	d
BlockedSkipList	BlockedSkipList.h	/^    BlockedSkipList(){}$/;"	f	class:BlockedSkipList
BlockedSkipList	BlockedSkipList.h	/^class BlockedSkipList : public SkipList{$/;"	c
CC	Makefile	/^CC=g++$/;"	m
CFLAGS	Makefile	/^CFLAGS=-g -Wall$/;"	m
CONCURRENTSKIPLIST_H	ConcurrentSkipList.h	2;"	d
ConcurrentSkipList	ConcurrentSkipList.h	/^    ConcurrentSkipList(){}$/;"	f	class:ConcurrentSkipList
ConcurrentSkipList	ConcurrentSkipList.h	/^class ConcurrentSkipList : public SkipList{$/;"	c
DEBUG	Main.cc	1;"	d	file:
JELLYFISH_SKIPLIST_H	JellyFishSkipList.h	2;"	d
JFNode	JellyFishSkipList.h	/^struct JFNode : public Node {$/;"	s
JellyFishSkipList	JellyFishSkipList.h	/^    JellyFishSkipList(){}$/;"	f	class:JellyFishSkipList
JellyFishSkipList	JellyFishSkipList.h	/^class JellyFishSkipList : public SkipList{$/;"	c
MAX_LEVEL	SkipList.h	16;"	d
Mutex	Util.h	/^    Mutex() { $/;"	f	class:Mutex
Mutex	Util.h	/^class Mutex {$/;"	c
NODE_H	Node.h	2;"	d
Node	Node.h	/^    Node (string k, string v, long t, int l) :$/;"	f	struct:Node
Node	Node.h	/^struct Node {$/;"	s
OBJS	Makefile	/^OBJS=Main.o BlockedSkipList.o ConcurrentSkipList.o JellyFishSkipList.o SimpleSkipList.o$/;"	m
OBJS	Makefile	/^OBJS=Main.o SimpleSkipList.o$/;"	m
SKIPLIST_H	SkipList.h	3;"	d
SimpleSKIPLIST_H	SimpleSkipList.h	2;"	d
SimpleSkipList	SimpleSkipList.h	/^    SimpleSkipList(){}$/;"	f	class:SimpleSkipList
SimpleSkipList	SimpleSkipList.h	/^class SimpleSkipList : public SkipList{$/;"	c
SkipList	SkipList.h	/^    SkipList() : $/;"	f	class:SkipList
SkipList	SkipList.h	/^class SkipList {$/;"	c
TARGET	Makefile	/^TARGET=Run$/;"	m
TimeStamp	Util.h	/^    TimeStamp(long s) : sequence (s) {}$/;"	f	class:TimeStamp
TimeStamp	Util.h	/^class TimeStamp {$/;"	c
VNode	Node.h	/^struct VNode {$/;"	s
_lock	Util.h	/^    pthread_mutex_t _lock;$/;"	m	class:Mutex
committed_ts	SkipList.h	/^    TimeStamp committed_ts; $/;"	m	class:SkipList
get	BlockedSkipList.cc	/^string BlockedSkipList::get(string key) $/;"	f	class:BlockedSkipList
get	BlockedSkipList.h	/^    string get(string key){}; $/;"	f	class:BlockedSkipList
get	ConcurrentSkipList.cc	/^string ConcurrentSkipList::get(string key) $/;"	f	class:ConcurrentSkipList
get	JellyFishSkipList.h	/^    string get(string key){}; $/;"	f	class:JellyFishSkipList
get	SimpleSkipList.cc	/^string SimpleSkipList::get(string key) $/;"	f	class:SimpleSkipList
get_and_inc	Util.h	/^    long get_and_inc(){$/;"	f	class:TimeStamp
global_ts	SkipList.h	/^    TimeStamp global_ts;$/;"	m	class:SkipList
height	SkipList.h	/^    int height;$/;"	m	class:SkipList
init	BlockedSkipList.cc	/^void BlockedSkipList::init()$/;"	f	class:BlockedSkipList
key	Node.h	/^    string key;$/;"	m	struct:Node
kv_map	ConcurrentSkipList.h	/^    unordered_map<string, string> kv_map; \/\/ hash map $/;"	m	class:ConcurrentSkipList
kv_map	JellyFishSkipList.h	/^    unordered_map<string, string> kv_map; \/\/ hash map $/;"	m	class:JellyFishSkipList
kv_map	SimpleSkipList.h	/^    map<string, string> kv_map; \/\/ hash map $/;"	m	class:SimpleSkipList
level	Node.h	/^    int level; $/;"	m	struct:Node
lock	Util.h	/^    void lock() {$/;"	f	class:Mutex
main	Main.cc	/^int main(int argc, char* argv[])$/;"	f
mlock	Util.h	/^    Mutex mlock;$/;"	m	class:TimeStamp
next	Node.h	/^    struct VNode* next; $/;"	m	struct:VNode	typeref:struct:VNode::VNode
next	Node.h	/^    vector<struct Node*> next; $/;"	m	struct:Node
put	BlockedSkipList.cc	/^int BlockedSkipList::put(string key, string value)$/;"	f	class:BlockedSkipList
put	BlockedSkipList.h	/^    int put(string key, string value){};$/;"	f	class:BlockedSkipList
put	ConcurrentSkipList.cc	/^int ConcurrentSkipList::put(string key, string value)$/;"	f	class:ConcurrentSkipList
put	JellyFishSkipList.h	/^    int put(string key, string value){};$/;"	f	class:JellyFishSkipList
put	SimpleSkipList.cc	/^int SimpleSkipList::put(string key, string value)$/;"	f	class:SimpleSkipList
remove	BlockedSkipList.cc	/^int BlockedSkipList::remove(string key)$/;"	f	class:BlockedSkipList
remove	BlockedSkipList.h	/^    int remove(string key){}; $/;"	f	class:BlockedSkipList
remove	ConcurrentSkipList.cc	/^int ConcurrentSkipList::remove(string key)$/;"	f	class:ConcurrentSkipList
remove	JellyFishSkipList.h	/^    int remove(string key){}; $/;"	f	class:JellyFishSkipList
remove	SimpleSkipList.cc	/^int SimpleSkipList::remove(string key)$/;"	f	class:SimpleSkipList
sequence	Util.h	/^    long sequence; $/;"	m	class:TimeStamp
sl	BlockedSkipList.h	/^    list<Node> sl; $/;"	m	class:BlockedSkipList
sl_mutex	BlockedSkipList.h	/^    mutex sl_mutex; $/;"	m	class:BlockedSkipList
timestamp	Node.h	/^    long timestamp; $/;"	m	struct:Node
timestamp	Node.h	/^    string timestamp; $/;"	m	struct:VNode
unlock	Util.h	/^    void unlock() {$/;"	f	class:Mutex
value	Node.h	/^    string value; $/;"	m	struct:Node
value	Node.h	/^    string value; $/;"	m	struct:VNode
vqueue	JellyFishSkipList.h	/^    VNode* vqueue;$/;"	m	struct:JFNode
vqueue_num	JellyFishSkipList.h	/^    int vqueue_num; $/;"	m	struct:JFNode
~BlockedSkipList	BlockedSkipList.h	/^    ~BlockedSkipList(){}$/;"	f	class:BlockedSkipList
~ConcurrentSkipList	ConcurrentSkipList.h	/^    ~ConcurrentSkipList(){}$/;"	f	class:ConcurrentSkipList
~JellyFishSkipList	JellyFishSkipList.h	/^    ~JellyFishSkipList(){}$/;"	f	class:JellyFishSkipList
~Mutex	Util.h	/^    ~Mutex(){}$/;"	f	class:Mutex
~Node	Node.h	/^    ~Node(){}$/;"	f	struct:Node
~SimpleSkipList	SimpleSkipList.h	/^    ~SimpleSkipList(){}$/;"	f	class:SimpleSkipList
~SkipList	SkipList.h	/^    ~SkipList() {}$/;"	f	class:SkipList
~TimeStamp	Util.h	/^    ~TimeStamp(){}$/;"	f	class:TimeStamp
